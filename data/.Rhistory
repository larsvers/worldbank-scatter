INVOICEPERIOD +
ADDRESSCHANGED,
data = train.final,
method = "gam")
caretGAM
names(caretGAM)
summary(caretGAM)
pred <- predict(caretGAM, newdata=test, type="response")
pred <- predict(caretGAM, newdata=test, type="prob")
head(pred)
plot(caretGAM)
ggplot(caretGAM)
df <- rbinom(50,1,0.3)
x <- rbinom(50,1,0.3)
df <- data.frame(x=x)
ifelse(df$x == 1, 0, 1)
df$y <- ifelse(df$x == 1, 0, 1)
summary(caretGbm)
library(ggplot2)
library(caret)
load("~/viasat/data/140605 v2 Data.RData")
save.image("~/viasat/data/140605 v2 Data Key Results.RData")
save.image("~/viasat/data/140605 v2 Data Key Results.RData")
predictors
confMatTestGBM
confMatTestGAM
confMatTestGLM
confMatTestKNN
caretGBM                                                          #  the selection process in numbers
ggplot(caretGBM) +
ggtitle("Stochastic Gradient Boosting Model - re-sampled") +
theme(plot.title = element_text(vjust=2, face="bold"))          #  The selection process as visual
caretGBMImp <- varImp(caretGBM, scale=T)
caretGBMImp
plot(caretGBMImp, main="Variable Importance of the Gradient Boosting Model")
ggplot(df.gains.graph, aes(percentile)) +
geom_line(aes(y = model, colour = "Model")) +
geom_point(aes(y = model, colour = "Model")) +
geom_text(aes(y = model, label = paste(as.character(
as.numeric(format(round(model,2),nsmall=2))*100),"%")),
size = 4, vjust=-0.4, hjust=-0.1, colour="#666666") +
geom_line(aes(y = chance, colour = "Chance")) +
ggtitle("Gains Curve for Gradient Boosting Model (Test data)") +
theme(plot.title = element_text(vjust=2, face="bold")) +
scale_x_continuous(breaks = (0:10)) +
scale_y_continuous(breaks = seq(0, 1, length.out = 11)) +
xlab("Percentile of dataset (from high risk churn to low risk churn)") +
ylab("Percent of detected churn")
load("~/viasat/data/140605 v2 Data.RData")
save.image("~/viasat/data/140605 v2 Data Key Results.RData")
library(ggplot2)
library(gbm)
library(survival)
library(splines)
library(caret)
predictors
confMatTestGBM
confMatTestGAM
confMatTestGLM
confMatTestKNN
caretGBM                                                          #  the selection process in numbers
ggplot(caretGBM) +
ggtitle("Stochastic Gradient Boosting Model - re-sampled") +
theme(plot.title = element_text(vjust=2, face="bold"))          #  The selection process as visual
caretGBMImp <- varImp(caretGBM, scale=T)
caretGBMImp
plot(caretGBMImp, main="Variable Importance of the Gradient Boosting Model")
ggplot(df.gains.graph, aes(percentile)) +
geom_line(aes(y = model, colour = "Model")) +
geom_point(aes(y = model, colour = "Model")) +
geom_text(aes(y = model, label = paste(as.character(
as.numeric(format(round(model,2),nsmall=2))*100),"%")),
size = 4, vjust=-0.4, hjust=-0.1, colour="#666666") +
geom_line(aes(y = chance, colour = "Chance")) +
ggtitle("Gains Curve for Gradient Boosting Model (Test data)") +
theme(plot.title = element_text(vjust=2, face="bold")) +
scale_x_continuous(breaks = (0:10)) +
scale_y_continuous(breaks = seq(0, 1, length.out = 11)) +
xlab("Percentile of dataset (from high risk churn to low risk churn)") +
ylab("Percent of detected churn")
ggplot(df.gains.graph, aes(percentile)) +
geom_line(aes(y = model, colour = "Model")) +
geom_point(aes(y = model, colour = "Model")) +
geom_text(aes(y = model, label = paste(as.character(
as.numeric(format(round(model,2),nsmall=2))*100),"%")),
size = 4, vjust=-0.4, hjust=-0.1, colour="#666666") +
geom_line(aes(y = chance, colour = "Chance")) +
ggtitle("Gains Curve for Gradient Boosting Model (Test data)") +
theme(plot.title = element_text(vjust=2, face="bold")) +
scale_x_continuous(breaks = (0:10)) +
scale_y_continuous(breaks = seq(0, 1, length.out = 11)) +
xlab("Percentile of dataset (sorted from high risk churn to low risk churn)") +
ylab("Percent of all churners detected")
install.packages("circlize")
library("circlize", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("migest")
demo(cfplot_reg, package = "migest", ask = FALSE)
set.seed(12345)
n = 1000
a = data.frame(factor = sample(letters[1:8], n, replace = TRUE),
+ x = rnorm(n), y = runif(n))
set.seed(12345)
n = 1000
a = data.frame(factor = sample(letters[1:8], n, replace = TRUE),
+ x = rnorm(n), y = runif(n))
a = data.frame(factor = sample(letters[1:8], n, replace = TRUE),
x = rnorm(n), y = runif(n))
a = data.frame(factor = sample(letters[1:8], n, replace = TRUE), x = rnorm(n), y = runif(n))
view(a)
View(a)
library(circlize)
par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.7)
circos.par("default.track.height" = 0.1)
circos.initialize(factors = a$factor, x = a$x)
circos.trackPlotRegion(factors = a$factor, y = a$y,
panel.fun = function(x, y) {
circos.axis()
})
circos.trackPlotRegion(factors = a$factor, y = a$y,panel.fun = function(x, y) {circos.axis()})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(a$factor, a$x, a$y, col = col,pch = 16, cex = 0.5)
circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)
circos.text(1, 0.5, "right", sector.index = "a")
circos.initialize(factors = a$factor, x = a$x)
circos.trackPlotRegion(factors = a$factor,
y = a$y,panel.fun = function(x, y) {circos.axis()})
circos.trackPlotRegion(factors = a$factor,
y = a$y,panel.fun = function(x, y) {circos.axis()})
circos.trackPlotRegion(factors = a$factor,y = a$y,panel.fun = function(x, y) {circos.axis()})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(a$factor, a$x, a$y, col = col,pch = 16, cex = 0.5)
par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.7)
circos.par("default.track.height" = 0.1)
circos.initialize(factors = a$factor, x = a$x)
circos.trackPlotRegion(factors = a$factor,y = a$y,panel.fun = function(x, y) {circos.axis()})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(a$factor, a$x, a$y, col = col,pch = 16, cex = 0.5)
circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)
circos.text(1, 0.5, "right", sector.index = "a")
bgcol = rep(c("#EFEFEF", "#CCCCCC"), 4)
circos.trackHist(a$factor, a$x, bg.col = bgcol, col = NA)
circos.trackPlotRegion(factors = a$factor, x = a$x, y = a$y,
+ panel.fun = function(x, y) {
+ grey = c("#FFFFFF", "#CCCCCC", "#999999")
+ i = get.cell.meta.data("sector.numeric.index")
+ circos.updatePlotRegion(bg.col = grey[i %% 3 + 1])
+ circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6)
+ circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)
+ })
circos.trackPlotRegion(factors = a$factor, x = a$x, y = a$y,panel.fun = function(x, y) {
grey = c("#FFFFFF", "#CCCCCC", "#999999")
i = get.cell.meta.data("sector.numeric.index")
circos.updatePlotRegion(bg.col = grey[i %% 3 + 1])
circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6)
circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)
})
circos.trackPlotRegion(factors = a$factor, x = a$x, y = a$y,panel.fun = function(x, y) {grey = c("#FFFFFF", "#CCCCCC", "#999999") i = get.cell.meta.data("sector.numeric.index") circos.updatePlotRegion(bg.col = grey[i %% 3 + 1]) circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6) circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)})
circos.trackPlotRegion(factors = a$factor, x = a$x, y = a$y,
panel.fun = function(x, y) {
grey = c("#FFFFFF", "#CCCCCC", "#999999")
i = get.cell.meta.data("sector.numeric.index")
circos.updatePlotRegion(bg.col = grey[i %% 3 + 1])
circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6)
circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)
})
circos.trackPlotRegion(factors = a$factor, x = a$x, y = a$y,
panel.fun = function(x, y) {
grey = c("#FFFFFF", "#CCCCCC", "#999999")
i = get.cell.meta.data("sector.numeric.index")
circos.updatePlotRegion(bg.col = grey[i %% 3 + 1])
circos.points(x[1:10], y[1:10], col = "red", pch = 16, cex = 0.6)
circos.points(x[11:20], y[11:20], col = "blue", cex = 0.6)
})
circos.updatePlotRegion(sector.index = "d", track.index = 2)
circos.points(x = -2:2, y = rep(0, 5))
circos.trackPlotRegion(factors = a$factor, y = a$y)
circos.trackLines(a$factor[1:100], a$x[1:100], a$y[1:100], type = "h")
circos.link("a", 0, "b", 0, top.ratio = 0.9)
circos.link("c", c(-0.5, 0.5), "d", c(-0.5,0.5), col = "red",
border = "blue", top.ratio = 0.2)
circos.link("e", 0, "g", c(-1,1), col = "green", lwd = 2, lty = 2)
circos.clear
circos.clear()
par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.7)
circos.par("default.track.height" = 0.1)
circos.initialize(factors = a$factor, x = a$x)
circos.trackPlotRegion(factors = a$factor,y = a$y,panel.fun = function(x, y) {circos.axis()})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(a$factor, a$x, a$y, col = col,pch = 16, cex = 0.5)
circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)
circos.text(1, 0.5, "right", sector.index = "a")
circos.link("a", 0, "b", 0, top.ratio = 0.9)
circos.link("c", c(-0.5, 0.5), "d", c(-0.5,0.5), col = "red",
border = "blue", top.ratio = 0.2)
circos.link("e", 0, "g", c(-1,1), col = "green", lwd = 2, lty = 2)
circos.clear()
circos.trackPlotRegion(factors = a$factor, y = a$y, panel.fun = function(x, y) {circos.axis()})
bgcol = rep(c("#EFEFEF", "#CCCCCC"), 4)
par(mar = c(1, 1, 1, 1), lwd = 0.1, cex = 0.7)
circos.par("default.track.height" = 0.1)
circos.initialize(factors = a$factor, x = a$x)
circos.trackPlotRegion(factors = a$factor, y = a$y, panel.fun = function(x, y) {circos.axis()})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.text(-1, 0.5, "left", sector.index = "a", track.index = 1)
circos.text(1, 0.5, "right", sector.index = "a")
circos.link("a", 0, "b", 0,
top.ratio = 0.9)
circos.link("c", c(-0.5, 0.5), "d", c(-0.5, 0.5),
col = "red",
border = "blue",
top.ratio = 0.2)
circos.link("c", c(-0.5, 0.5), "d", c(-0.5, 0.5),
col = "red",
border = "blue",
top.ratio = 0.9)
circos.link("c", c(-0.5, 0.5), "d", c(-0.5, 0.5),
col = "red",
border = "blue",
top.ratio = 0.1)
circos.link("e", 0, "g", c(-1, 1),
col = "green",
lwd = 2,
lty = 2)
circos.clear()
circos.trackPlotRegion(factors = a$factor, y = a$y, panel.fun = function(x, y) {circos.axis()})
region_custom <- read.delim("~/Desktop/region_custom.txt", header=F)
View(region_custom)
library(xlsx)
read.xlsx("~/Desktop/torqu01.xlsx")
read.xlsx("~/Desktop/torque01.xlsx")
read.xlsx("~/Desktop/torque01.xlsx",1)
df.torque.1 <- read.xlsx("~/Desktop/torque01.xlsx",1)
torque01 <- read.csv("~/Desktop/torque01.csv")
View(torque01)
smp_size <- floor(0.3 * nrow(torque01))
set.seed(123)
smple <- sample(seq_len(nrow(torque01)), size = smp_size)
torque02 <- torque01[train_ind, ]
torque02 <- torque01[smple, ]
write.csv(torque02,"~/Desktop/torque02.csv")
load("~/viasat/data/140605 v2 Data Key Results.RData")
library(ggplot2)
library(gbm)
library(survival)
library(splines)
library(caret)
predictors
confMatTestGBM
confMatTestGAM
confMatTestGLM
confMatTestKNN
caretGBM                                                          #  the selection process in numbers
ggplot(caretGBM) +
ggtitle("Stochastic Gradient Boosting Model - re-sampled") +
theme(plot.title = element_text(vjust=2, face="bold"))          #  The selection process as visual
caretGBMImp <- varImp(caretGBM, scale=T)
caretGBMImp
plot(caretGBMImp, main="Variable Importance of the Gradient Boosting Model")
ggplot(df.gains.graph, aes(percentile)) +
geom_line(aes(y = model, colour = "Model")) +
geom_point(aes(y = model, colour = "Model")) +
geom_text(aes(y = model, label = paste(as.character(
as.numeric(format(round(model,2),nsmall=2))*100),"%")),
size = 4, vjust=-0.4, hjust=-0.1, colour="#666666") +
geom_line(aes(y = chance, colour = "Chance")) +
ggtitle("Gains Curve for Gradient Boosting Model (Test data)") +
theme(plot.title = element_text(vjust=2, face="bold")) +
scale_x_continuous(breaks = (0:10)) +
scale_y_continuous(breaks = seq(0, 1, length.out = 11)) +
xlab("Percentile of dataset (sorted from high risk churn to low risk churn)") +
ylab("Percent of all churners detected")
load("~/viasat/nfx attack/data/140704 nfx attack data.RData")
caretGBMBrand
caretGBMBrandImp
caretGBMContentImp
caretGBMBContentImp
caretGBMDemoImp
caretGBMMarketImp
setwd("./viz/projects/dashboard/data")
getwd()
library(reshape2)
getwd()
library(reshape2)
getwd()
setwd("./viz/projects/dashboard/data")
# read data
data <- read.csv("dataMultQuestionsWide.csv")
# (1) easy : melt data (into long format)
valueStart <- as.vector(sapply(data, is.numeric))
valueStart <- length(valueStart[valueStart == FALSE])
dataMelt <- melt(data,id=c(1:valueStart), variable.name="date")
rm(list=ls()[c(1,3)])
# recode date
dataMelt[,"date"] <- gsub("X","", as.character(dataMelt[,"date"]))
dataMelt[,"date"] <- gsub("\\.","-", as.character(dataMelt[,"date"]))
# recode value
dataMelt[,"value"] <- dataMelt[,"value"]*100
# new time variables
dataMelt$year <- as.numeric(substr(dataMelt[,"date"], 1, 4))
dataMelt$month <- as.numeric(substr(dataMelt[,"date"], 6, 7))
dataMelt$quarter <- cut(dataMelt$month, breaks=c(0,3,6,9,12), labels=c(1,2,3,4))
dataMelt$quarter <- as.numeric(as.character(dataMelt$quarter))
dataMelt$halfyear <- cut(dataMelt$month, breaks=c(0,6,12), labels=c(1,2))
dataMelt$halfyear <- as.numeric(as.character(dataMelt$halfyear))
# reorder data
dataMelt <- dataMelt[c(1,2,3,4,5,6,8,9,10,11,7)]
# write table
write.csv(dataMelt, "dataMultQuestionsLong.csv", row.names=F, fileEncoding="UTF-8")
View(dataMelt)
data <- read.csv("dataMultQuestionsWide.csv")
View(data)
valueStart <- as.vector(sapply(data, is.numeric))
valueStart
valueStart <- length(valueStart[valueStart == FALSE])
valueStart
dataMelt <- melt(data,id=c(1:valueStart), variable.name="date")
View(dataMelt)
rm(list=ls()[c(1,3)])
dataMelt[,"date"] <- gsub("X","", as.character(dataMelt[,"date"]))
View(dataMelt)
dataMelt[,"date"] <- gsub("\\.","-", as.character(dataMelt[,"date"]))
View(dataMelt)
dataMelt[,"value"] <- dataMelt[,"value"]*100
View(dataMelt)
dataMelt$year <- as.numeric(substr(dataMelt[,"date"], 1, 4))
View(dataMelt)
dataMelt$year <- as.numeric(substr(dataMelt[,"date"], 7, 10))
View(dataMelt)
dataMelt$month <- as.numeric(substr(dataMelt[,"date"], 4, 5))
View(dataMelt)
dataMelt$quarter <- cut(dataMelt$month, breaks=c(0,3,6,9,12), labels=c(1,2,3,4))
dataMelt$quarter <- as.numeric(as.character(dataMelt$quarter))
dataMelt$halfyear <- cut(dataMelt$month, breaks=c(0,6,12), labels=c(1,2))
dataMelt$halfyear <- as.numeric(as.character(dataMelt$halfyear))
View(dataMelt)
dataMelt[,"value"] <- dataMelt[,"value"]*100
View(dataMelt)
dataMelt[,"value"] <- dataMelt[,"value"]/100
View(dataMelt)
dataMelt <- dataMelt[c(1,2,3,4,5,6,8,9,10,11,7)]
View(dataMelt)
write.csv(dataMelt, "dataMultQuestionsLong.csv", row.names=F, fileEncoding="UTF-8")
library(reshape2)
getwd()
data <- read.csv("trackerV1.csv")
View(data)
data <- read.csv("trackerV1.csv")
View(data)
valueStart <- as.vector(sapply(data, is.numeric))
valueStart <- length(valueStart[valueStart == FALSE])
dataMelt <- melt(data,id=c(1:valueStart), variable.name="date")
rm(list=ls()[c(1,3)])
dataMelt[,"date"] <- gsub("X","", as.character(dataMelt[,"date"]))
dataMelt[,"date"] <- gsub("\\.","-", as.character(dataMelt[,"date"]))
dataMelt[,"value"] <- dataMelt[,"value"]*100
View(dataMelt)
data <- read.csv("trackerV1.csv")
valueStart <- as.vector(sapply(data, is.numeric))
valueStart
data <- read.csv("trackerV1.csv")
valueStart <- as.vector(sapply(data, is.numeric)) # make sure first value-columns is also first numeric vector !
valueStart <- length(valueStart[valueStart == FALSE])
valueStart
dataMelt <- melt(data,id=c(1:valueStart), variable.name="date")
rm(list=ls()[c(1,3)])
dataMelt[,"date"] <- gsub("X","", as.character(dataMelt[,"date"]))
dataMelt[,"date"] <- gsub("\\.","-", as.character(dataMelt[,"date"]))
dataMelt[,"value"] <- dataMelt[,"value"]*100
dataMelt$year <- as.numeric(substr(dataMelt[,"date"], 1, 4))
dataMelt$month <- as.numeric(substr(dataMelt[,"date"], 6, 7))
dataMelt$quarter <- cut(dataMelt$month, breaks=c(0,3,6,9,12), labels=c(1,2,3,4))
dataMelt$quarter <- as.numeric(as.character(dataMelt$quarter))
dataMelt$halfyear <- cut(dataMelt$month, breaks=c(0,6,12), labels=c(1,2))
dataMelt$halfyear <- as.numeric(as.character(dataMelt$halfyear))
View(dataMelt)
dataMelt$year <- as.numeric(substr(dataMelt[,"date"], 7, 10))
View(dataMelt)
dataMelt$month <- as.numeric(substr(dataMelt[,"date"], 4, 5))
data <- read.csv("trackerV1.csv")
valueStart <- as.vector(sapply(data, is.numeric)) # make sure first value-columns is also first numeric vector !
valueStart <- length(valueStart[valueStart == FALSE])
dataMelt <- melt(data,id=c(1:valueStart), variable.name="date")
rm(list=ls()[c(1,3)])
View(dataMelt)
dataMelt[,"date"] <- gsub("X","", as.character(dataMelt[,"date"]))
View(dataMelt)
dataMelt[,"date"] <- gsub("\\.","-", as.character(dataMelt[,"date"]))
View(dataMelt)
dataMelt[,"value"] <- dataMelt[,"value"]*100
View(dataMelt)
dataMelt$year <- as.numeric(substr(dataMelt[,"date"], 7, 10))
View(dataMelt)
dataMelt$month <- as.numeric(substr(dataMelt[,"date"], 4, 5))
as.numeric("1")
as.numeric("01")
as.numeric("0001")
as.numeric("0002")
substr(dataMelt[,"date"], 4, 5)
data <- read.csv("trackerV1.csv")
View(data)
names(data)
str(names(data))
colnames(data)
str(colnames(data))
substr(names(data),1,2)
substr(names(data),1,1)
substr(names(data),1,1) == "X"
as.vector(substr(names(data),1,1) == "X")
length(blub)
blub <- as.vector(substr(names(data),1,1) == "X")
length(blub)
length(blub == F)
length(blub[blub == F])
firstDateCol <- as.vector(substr(names(data),1,1) == "X")
firstDateCol <- length(blub[blub == F])
dataMelt <- melt(data,id=c(1:firstDateCol), variable.name="date")
View(dataMelt)
dataMelt[,"date"] <- gsub("X","", as.character(dataMelt[,"date"]))
dataMelt[,"date"] <- gsub("\\.","-", as.character(dataMelt[,"date"]))
dataMelt[,"value"] <- dataMelt[,"value"]*100
View(dataMelt)
dataMelt$year <- as.numeric(substr(dataMelt[,"date"], 7, 10))
dataMelt$month <- as.numeric(substr(dataMelt[,"date"], 4, 5))
View(dataMelt)
dataMelt$month
dataMelt$quarter <- cut(dataMelt$month, breaks=c(0,3,6,9,12), labels=c(1,2,3,4))
dataMelt$quarter <- as.numeric(as.character(dataMelt$quarter))
dataMelt$halfyear <- cut(dataMelt$month, breaks=c(0,6,12), labels=c(1,2))
dataMelt$halfyear <- as.numeric(as.character(dataMelt$halfyear))
View(dataMelt)
names(dataMelt)
names(dataMelt) == "value"
as.vector(names(dataMelt) == "value")
(names(dataMelt) == "value") == TRUE
lebgth((names(dataMelt) == "value") == TRUE)
length((names(dataMelt) == "value") == TRUE)
blub <- (names(dataMelt) == "value")
blub[blub == T]
length(blub[blub == T])
min(which(blub == T)
min(which(blub == T))
min(which(blub == T))
which(blub == T)
valueIndex <- (names(dataMelt) == "value")
valueIndex <- which(blub == T)
(valueIndex <- which(blub == T))
length(names(dataMelt))
1:15
str(1:15)
1:valueIndex
1:valueIndex-1
valueIndex+1:length(names(dataMelt))
valueIndex+1:max(length(names(dataMelt)))
length(names(dataMelt))
end <- length(names(dataMelt))
(end <- length(names(dataMelt)))
1:valueIndex-1
blub <- 1:valueIndex-1
valueIndex+1:end
1:15
11:15
end
str(end)
(valueIndex+1):end
endNum <- length(names(dataMelt))
firstArray <- 1:(valueIndex-1)
(valueIndex+1):end
endArray <- (valueIndex+1):end
finalArray <- c(startArray,endArray,valueIndex)
startArray <- 1:(valueIndex-1)
endArray <- (valueIndex+1):end
finalArray <- c(startArray,endArray,valueIndex)
finalArray
data <- read.csv("trackerV1.csv")
firstDateCol <- as.vector(substr(names(data),1,1) == "X")
firstDateCol <- length(blub[blub == F])
dataMelt <- melt(data,id=c(1:firstDateCol), variable.name="date")
rm(list=ls()[c(1,3)])
data <- read.csv("trackerV1.csv")
data <- read.csv("trackerV1.csv")
View(data)
firstDateCol <- as.vector(substr(names(data),1,1) == "X")
firstDateCol <- length(blub[blub == F])
firstDateCol <- length(firstDateCol[firstDateCol == F])
dataMelt <- melt(data,id=c(1:firstDateCol), variable.name="date")
rm(list=ls()[c(1,3)])
# recode date
dataMelt[,"date"] <- gsub("X","", as.character(dataMelt[,"date"]))
dataMelt[,"date"] <- gsub("\\.","-", as.character(dataMelt[,"date"]))
# recode value
dataMelt[,"value"] <- dataMelt[,"value"]*100
# new time variables
dataMelt$year <- as.numeric(substr(dataMelt[,"date"], 7, 10))
dataMelt$month <- as.numeric(substr(dataMelt[,"date"], 4, 5))
dataMelt$quarter <- cut(dataMelt$month, breaks=c(0,3,6,9,12), labels=c(1,2,3,4))
dataMelt$quarter <- as.numeric(as.character(dataMelt$quarter))
dataMelt$halfyear <- cut(dataMelt$month, breaks=c(0,6,12), labels=c(1,2))
dataMelt$halfyear <- as.numeric(as.character(dataMelt$halfyear))
valueIndex <- (names(dataMelt) == "value")
valueIndex <- which(valueIndex == T)
endNum <- length(names(dataMelt))
startArray <- 1:(valueIndex-1)
endArray <- (valueIndex+1):endNum
finalArray <- c(startArray,endArray,valueIndex)
dataMelt <- dataMelt[finalArray]
View(dataMelt)
write.csv(dataMelt, "dataLong.csv", row.names=F, fileEncoding="UTF-8")
delete <- c("endNum","startArray","endArray","finalArray")
rm(list=ls()[c("endNum","startArray","endArray","finalArray")])
rm(list=ls()[delete])
rm(list=c("endNum","startArray","endArray","finalArray"))
rm(list=c("valueIndex","endNum","startArray","endArray","finalArray"))
